<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Admin Dashboard</title>
    <!-- Firebase -->
    <script src="https://www.gstatic.com/firebasejs/9.0.0/firebase-app.js"></script>
    <script src="https://www.gstatic.com/firebasejs/9.0.0/firebase-firestore.js"></script>
    <script src="https://www.gstatic.com/firebasejs/9.0.0/firebase-auth.js"></script>
</head>
<body>
    <h1>Admin Dashboard</h1>

    <!-- إضافة فئة جديدة -->
    <div>
        <h2>Add Category</h2>
        <input type="text" id="categoryName" placeholder="Category Name">
        <button onclick="addCategory()">Add Category</button>
    </div>

    <!-- عرض الفئات وإمكانية تحريرها -->
    <div>
        <h2>Categories</h2>
        <div id="categoriesList"></div>
        <div id="editCategoryContainer" style="display:none;">
            <input type="text" id="editCategoryName" placeholder="Edit Category Name">
            <button onclick="updateCategory()">Update Category</button>
            <button onclick="deleteCategory()">Delete Category</button>
        </div>
    </div>

    <!-- إضافة سؤال جديد -->
    <div>
        <h2>Add Question</h2>
        <input type="text" id="questionText" placeholder="Question Text">
        <input type="text" id="questionImageUrl" placeholder="Image URL">
        <input type="text" id="questionVideoUrl" placeholder="Video URL">
        <input type="text" id="questionAudioUrl" placeholder="Audio URL">
        <input type="text" id="correctAnswer" placeholder="Correct Answer">
        <input type="text" id="questionPoints" placeholder="Points">
        <input type="text" id="questionDifficulty" placeholder="Difficulty">
        <button onclick="addQuestion()">Add Question</button>
    </div>

    <!-- عرض الأسئلة وإمكانية تحريرها -->
    <div id="questionsList"></div>
    <div id="editQuestionContainer" style="display:none;">
        <input type="text" id="editQuestionText" placeholder="Edit Question Text">
        <input type="text" id="editQuestionImageUrl" placeholder="Edit Image URL">
        <input type="text" id="editQuestionVideoUrl" placeholder="Edit Video URL">
        <input type="text" id="editQuestionAudioUrl" placeholder="Edit Audio URL">
        <input type="text" id="editCorrectAnswer" placeholder="Edit Correct Answer">
        <input type="text" id="editQuestionPoints" placeholder="Edit Points">
        <input type="text" id="editQuestionDifficulty" placeholder="Edit Difficulty">
        <button onclick="updateQuestion()">Update Question</button>
        <button onclick="deleteQuestion()">Delete Question</button>
    </div>

    <script>
        // تكوين Firebase
        const firebaseConfig = {
            apiKey: "YOUR_API_KEY",
            authDomain: "YOUR_PROJECT_ID.firebaseapp.com",
            projectId: "YOUR_PROJECT_ID",
            storageBucket: "YOUR_PROJECT_ID.appspot.com",
            messagingSenderId: "YOUR_SENDER_ID",
            appId: "YOUR_APP_ID"
        };

        // تهيئة Firebase
        const app = firebase.initializeApp(firebaseConfig);
        const db = firebase.firestore();

        let selectedCategoryId = null; // لتخزين معرف الفئة المحددة
        let selectedQuestionId = null; // لتخزين معرف السؤال المحدد

        // إضافة فئة جديدة
        function addCategory() {
            const categoryName = document.getElementById('categoryName').value;
            db.collection("categories").add({
                name: categoryName
            })
            .then(() => {
                alert("Category added successfully");
                loadCategories(); // إعادة تحميل الفئات بعد الإضافة
            })
            .catch(error => {
                console.error("Error adding category: ", error);
            });
        }

        // تحميل الفئات
        function loadCategories() {
            db.collection("categories").get().then(querySnapshot => {
                const categoriesList = document.getElementById('categoriesList');
                categoriesList.innerHTML = ''; // تفريغ القائمة الحالية
                querySnapshot.forEach(doc => {
                    const category = doc.data();
                    categoriesList.innerHTML += `<div onclick="loadQuestions('${doc.id}')">${category.name} <button onclick="editCategory('${doc.id}', '${category.name}')">Edit</button></div>`;
                });
            });
        }

        // تحرير الفئة
        function editCategory(categoryId, categoryName) {
            selectedCategoryId = categoryId;
            document.getElementById('editCategoryName').value = categoryName;
            document.getElementById('editCategoryContainer').style.display = 'block';
        }

        // تحديث الفئة
        function updateCategory() {
            const updatedName = document.getElementById('editCategoryName').value;
            db.collection("categories").doc(selectedCategoryId).update({
                name: updatedName
            }).then(() => {
                alert("Category updated successfully");
                loadCategories();
            }).catch(error => {
                console.error("Error updating category: ", error);
            });
        }

        // حذف الفئة
        function deleteCategory() {
            db.collection("categories").doc(selectedCategoryId).delete().then(() => {
                alert("Category deleted successfully");
                loadCategories();
                document.getElementById('editCategoryContainer').style.display = 'none';
            }).catch(error => {
                console.error("Error deleting category: ", error);
            });
        }

        // إضافة سؤال جديد
        function addQuestion() {
            const questionData = {
                text: document.getElementById('questionText').value,
                imageUrl: document.getElementById('questionImageUrl').value,
                videoUrl: document.getElementById('questionVideoUrl').value,
                audioUrl: document.getElementById('questionAudioUrl').value,
                correctAnswer: document.getElementById('correctAnswer').value,
                points: parseInt(document.getElementById('questionPoints').value),
                difficulty: document.getElementById('questionDifficulty').value,
                category: selectedCategoryId // تأكد من تعيين الفئة المحددة
            };

            db.collection("categories").doc(selectedCategoryId).collection("questions").add(questionData)
            .then(() => {
                alert("Question added successfully");
                loadQuestions(selectedCategoryId); // إعادة تحميل الأسئلة بعد الإضافة
            })
            .catch(error => {
                console.error("Error adding question: ", error);
            });
        }

        // تحميل الأسئلة لفئة معينة
        function loadQuestions(categoryId) {
            selectedCategoryId = categoryId; // تخزين معرف الفئة المحددة
            db.collection("categories").doc(categoryId).collection("questions").get().then(querySnapshot => {
                const questionsList = document.getElementById('questionsList');
                questionsList.innerHTML = ''; // تفريغ القائمة الحالية
                querySnapshot.forEach(doc => {
                    const question = doc.data();
                    questionsList.innerHTML += `<div>${question.text} <button onclick="editQuestion('${doc.id}', '${question.text}', '${question.imageUrl}', '${question.videoUrl}', '${question.audioUrl}', '${question.correctAnswer}', ${question.points}, '${question.difficulty}')">Edit</button></div>`;
                });
            });
        }

        // تحرير السؤال
        function editQuestion(questionId, text, imageUrl, videoUrl, audioUrl, correctAnswer, points, difficulty) {
            selectedQuestionId = questionId;
            document.getElementById('editQuestionText').value = text;
            document.getElementById('editQuestionImageUrl').value = imageUrl;
            document.getElementById('editQuestionVideoUrl').value = videoUrl;
            document.getElementById('editQuestionAudioUrl').value = audioUrl;
            document.getElementById('editCorrectAnswer').value = correctAnswer;
            document.getElementById('editQuestionPoints').value = points;
            document.getElementById('editQuestionDifficulty').value = difficulty;
            document.getElementById('editQuestionContainer').style.display = 'block';
        }

        // تحديث السؤال
        function updateQuestion() {
            const updatedQuestion = {
                text: document.getElementById('editQuestionText').value,
                imageUrl: document.getElementById('editQuestionImageUrl').value,
                videoUrl: document.getElementById('editQuestionVideoUrl').value,
                audioUrl: document.getElementById('editQuestionAudioUrl').value,
                correctAnswer: document.getElementById('editCorrectAnswer').value,
                points: parseInt(document.getElementById('editQuestionPoints').value),
                difficulty: document.getElementById('editQuestionDifficulty').value,
            };

            db.collection("categories").doc(selectedCategoryId).collection("questions").doc(selectedQuestionId).update(updatedQuestion)
            .then(() => {
                alert("Question updated successfully");
                loadQuestions(selectedCategoryId);
            }).catch(error => {
                console.error("Error updating question: ", error);
            });
        }

        // حذف السؤال
        function deleteQuestion() {
            db.collection("categories").doc(selectedCategoryId).collection("questions").doc(selectedQuestionId).delete().then(() => {
                alert("Question deleted successfully");
                loadQuestions(selectedCategoryId);
                document.getElementById('editQuestionContainer').style.display = 'none';
            }).catch(error => {
                console.error("Error deleting question: ", error);
            });
        }

        // فحص صلاحية الروابط
        function checkLinkValidity(url, callback) {
            fetch(url, { method: 'HEAD' })
            .then(response => {
                if (response.ok) {
                    callback(true);
                } else {
                    callback(false);
                }
            })
            .catch(() => callback(false));
        }

        // فحص جميع الروابط في سؤال
        function checkQuestionLinks(questionId, questionData) {
            const links = [questionData.imageUrl, questionData.videoUrl, questionData.audioUrl];
            links.forEach(link => {
                if (link) {
                    checkLinkValidity(link, isValid => {
                        if (!isValid) {
                            alert(`Invalid link found: ${link}`);
                        }
                    });
                }
            });
        }

        // استدعاء الدوال لبدء تحميل الفئات
        loadCategories();
    </script>
</body>
</html>
